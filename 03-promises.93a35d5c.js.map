{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,yBAGrBI,EAA8BP,EAA9BI,QAASI,EAAqBR,EAArBK,OAAQI,EAAaT,EAAbM,SAqB/B,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAS,CAAEN,WAAUC,UAErBM,EAAQ,CAAEP,WAAUC,YACpBA,MA9BoCZ,EAApCC,KAEHmB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAIJ,IAFA,IAA8BC,EA4BvB,CACLX,MAAOY,OAAOjB,EAAQkB,OACtBC,KAAMF,OAAOhB,EAAOiB,OACpBE,OAAQH,OAAOf,EAASgB,QA/BpBG,EAAwBL,EAAxBX,MAAOc,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAEVE,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EACrDnB,EAAcmB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAAlC,GAASmC,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,UACrEwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACpBoB,EAAAlC,GAASmC,OAAOI,QAAQ,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,UAEvEgB,GAASF,EACTY,QAAQC,IAAIX,M","sources":["js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]'),\n}\n\nconst { form, delayEl, stepEl, amountEl } = refs;\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let { delay, step, amount } = getValues();\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n    console.log(delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(({ position, delay }));\n    } else {\n        reject(({ position, delay }));\n    }}, delay)\n  });\n}\n\nfunction getValues() {\n  return {\n    delay: Number(delayEl.value),\n    step: Number(stepEl.value),\n    amount: Number(amountEl.value),\n  }\n}"],"names":["$iU1Pc","parcelRequire","$6feac956dbd89734$var$refs","form","document","querySelector","delayEl","stepEl","amountEl","$6feac956dbd89734$var$delayEl","$6feac956dbd89734$var$stepEl","$6feac956dbd89734$var$amountEl","$6feac956dbd89734$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","ref","Number","value","step","amount","delay1","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","console","log"],"version":3,"file":"03-promises.93a35d5c.js.map"}